# Transactions.py
import Signatures
# transaction class
# reqd --> required sigs that are not inputs 
class Tx:
    inputs = None
    outputs = None
    sigs = None
    reqd = None
    def __init__(self):  
        inputs = []
        outputs = []
        sigs = []
        reqd = []
    def add_input(self, from_addr, amount): # takes an address 
        pass
    def add_output(self, to_addr, amount): 
        pass
    def add_reqd(self, addr): 
        pass
    def sign(self, private): # takes into account all the inputs, outputs, requirements but not the other signatures
        pass
    def is_valid(self):
        return False

if __name__ == "__main__":
    pr1, pu1 = Signatures.generate_keys()
    pr2, pu2 = Signatures.generate_keys()
    pr3, pu3 = Signatures.generate_keys()
    pr4, pu4 = Signatures.generate_keys()

    Tx1 = Tx()
    Tx1.add_input(pu1, 1)
    Tx1.add_output(pu2, 1)
    Tx1.sign(pr1)
    if Tx1.is_valid():
        print("Success! Tx is valid")
    else:
        print("ERROR! Tx is invalid")


    Tx2 = Tx()
    Tx2.add_input(pu1, 2)
    Tx2.add_output(pu2, 1)
    Tx2.add_output(pu3, 1)
    Tx2.sign(pr1)

    # Escrow transaction
    Tx3 = Tx()
    Tx3.add_input(pu3, 1.2)
    Tx3.add_output(pu1, 1.1)
    Tx3.sign(pr3) # sign it using the private key for 3 b/c input always signs --> pu3
    

    for t in [Tx1, Tx2, Tx3]:
        if t.is_valid():
            print("Success! Tx is valid")
        else:
            print("ERROR! Tx is invalid")
    
